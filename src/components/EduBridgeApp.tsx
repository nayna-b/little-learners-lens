
import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Mic, MicOff, Volume2, VolumeX, Send, Star, Heart, ThumbsUp, BookOpen, Globe, Wifi, WifiOff } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import ChatMessage from './ChatMessage';
import VoiceInput from './VoiceInput';
import TextToSpeech from './TextToSpeech';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  language: string;
}

const EduBridgeApp = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isOfflineMode, setIsOfflineMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [feedbackEmojis, setFeedbackEmojis] = useState<string[]>([]);
  const { toast } = useToast();

  const languages = [
    { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi', name: 'рд╣рд┐рдВрджреА (Hindi)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ta', name: 'родрооро┐ро┤рпН (Tamil)', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'te', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)', flag: 'ЁЯЗоЁЯЗ│' },
  ];

  const welcomeMessages = {
    en: "Hi there! I'm EduBridge, your friendly AI tutor! ЁЯМЯ Ask me anything about math, science, or language. I'm here to help you learn!",
    hi: "рдирдорд╕реНрддреЗ! рдореИрдВ EduBridge рд╣реВрдБ, рдЖрдкрдХрд╛ рджреЛрд╕реНрддрд╛рдирд╛ AI рд╢рд┐рдХреНрд╖рдХ! ЁЯМЯ рдЧрдгрд┐рдд, рд╡рд┐рдЬреНрдЮрд╛рди рдпрд╛ рднрд╛рд╖рд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ!",
    ta: "ро╡рогроХрпНроХроорпН! роиро╛ройрпН EduBridge, роЙроЩрпНроХро│рпН роироЯрпНрокрпБро░рпАродро┐ропро╛рой AI роЖроЪро┐ро░ро┐ропро░рпН! ЁЯМЯ роХрогро┐родроорпН, роЕро▒ро┐ро╡ро┐ропро▓рпН роЕро▓рпНро▓родрпБ роорпКро┤ро┐ рокро▒рпНро▒ро┐ роОродрпИропрпБроорпН роХрпЗро│рпБроЩрпНроХро│рпН. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роХро▒рпНро▒рпБроХрпН роХрпКроЯрпБроХрпНроХ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН!",
    te: "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б EduBridge, р░ор▒А р░╕р▒Нр░ир▒Зр░╣р░кр▒Вр░░р▒Нр░╡р░Х AI р░Йр░кр░╛р░зр▒Нр░пр░╛р░пр▒Бр░бр▒Б! ЁЯМЯ р░Чр░гр░┐р░др░В, р░╕р▒Ир░ир▒Нр░╕р▒Н р░▓р▒Зр░жр░╛ р░нр░╛р░╖ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░жр▒Ир░ир░╛ р░Ер░бр░Чр░Вр░бр░┐. р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░ир▒Зр░░р▒Нр░кр░бр░╛р░ир░┐р░Хр░┐ р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б!"
  };

  useEffect(() => {
    // Add welcome message when component mounts
    const welcomeMessage: Message = {
      id: '1',
      text: welcomeMessages[selectedLanguage as keyof typeof welcomeMessages],
      isUser: false,
      timestamp: new Date(),
      language: selectedLanguage
    };
    setMessages([welcomeMessage]);
  }, []);

  useEffect(() => {
    // Update welcome message when language changes
    if (messages.length > 0) {
      const updatedMessages = [...messages];
      updatedMessages[0] = {
        ...updatedMessages[0],
        text: welcomeMessages[selectedLanguage as keyof typeof welcomeMessages],
        language: selectedLanguage
      };
      setMessages(updatedMessages);
    }
  }, [selectedLanguage]);

  const generateEduBridgeResponse = async (question: string, language: string): Promise<string> => {
    // Simulate AI processing time
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    // Simple educational responses based on keywords and language
    const responses = {
      en: {
        electricity: "тЪб Electricity is like invisible energy that flows through wires! Think of it like water flowing through pipes. When you flip a switch, electricity flows to the light bulb and makes it glow! тЬи",
        fractions: "ЁЯНХ Fractions are parts of a whole! Imagine a pizza cut into 4 slices. If you eat 2 slices, you ate 2/4 (or 1/2) of the pizza! The top number tells us how many parts we have, and the bottom number tells us how many parts the whole thing is divided into. ЁЯзо",
        verbs: "ЁЯПГтАНтЩВя╕П Verbs are action words! They tell us what someone is doing. Like 'run', 'jump', 'eat', 'sleep'. When I say 'The cat runs', 'runs' is the verb because it shows the action! ЁЯУЪ",
        default: "That's a great question! ЁЯдФ Let me help you understand this step by step. Remember, learning is like building blocks - we start with simple ideas and build bigger ones! Keep asking questions, that's how we learn best! ЁЯМЯ"
      },
      hi: {
        electricity: "тЪб рдмрд┐рдЬрд▓реА рдПрдХ рдЕрджреГрд╢реНрдп рдКрд░реНрдЬрд╛ рд╣реИ рдЬреЛ рддрд╛рд░реЛрдВ рд╕реЗ рдмрд╣рддреА рд╣реИ! рдЗрд╕реЗ рдкрд╛рдиреА рдХреА рддрд░рд╣ рд╕рдордЭреЗрдВ рдЬреЛ рдкрд╛рдЗрдк рдореЗрдВ рдмрд╣рддрд╛ рд╣реИред рдЬрдм рдЖрдк рд╕реНрд╡рд┐рдЪ рджрдмрд╛рддреЗ рд╣реИрдВ, рдмрд┐рдЬрд▓реА рдмрд▓реНрдм рддрдХ рдкрд╣реБрдВрдЪрддреА рд╣реИ рдФрд░ рдЙрд╕реЗ рдЪрдордХрд╛рддреА рд╣реИ! тЬи",
        fractions: "ЁЯНХ рднрд┐рдиреНрди рдХрд╛ рдорддрд▓рдм рд╣реИ рдкреВрд░реЗ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛! рдПрдХ рдкрд┐рдЬреНрдЬрд╛ рдХреЛ 4 рдЯреБрдХрдбрд╝реЛрдВ рдореЗрдВ рдХрд╛рдЯрдиреЗ рдХреА рдХрд▓реНрдкрдирд╛ рдХрд░реЗрдВред рдЕрдЧрд░ рдЖрдк 2 рдЯреБрдХрдбрд╝реЗ рдЦрд╛рддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдиреЗ 2/4 (рдпрд╛ 1/2) рдкрд┐рдЬреНрдЬрд╛ рдЦрд╛рдпрд╛! рдКрдкрд░ рд╡рд╛рд▓рд╛ рдирдВрдмрд░ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ рд╣рдорд╛рд░реЗ рдкрд╛рд╕ рдХрд┐рддрдиреЗ рд╣рд┐рд╕реНрд╕реЗ рд╣реИрдВред ЁЯзо",
        verbs: "ЁЯПГтАНтЩВя╕П рдХреНрд░рд┐рдпрд╛ рд╡реЗ рд╢рдмреНрдж рд╣реИрдВ рдЬреЛ рдХрд╛рдо рджрд┐рдЦрд╛рддреЗ рд╣реИрдВ! рдЬреИрд╕реЗ 'рджреМрдбрд╝рдирд╛', 'рдХреВрджрдирд╛', 'рдЦрд╛рдирд╛', 'рд╕реЛрдирд╛'ред рдЬрдм рдореИрдВ рдХрд╣рддрд╛ рд╣реВрдБ 'рдмрд┐рд▓реНрд▓реА рджреМрдбрд╝рддреА рд╣реИ', рддреЛ 'рджреМрдбрд╝рддреА' рдХреНрд░рд┐рдпрд╛ рд╣реИ! ЁЯУЪ",
        default: "рдпрд╣ рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╕рд╡рд╛рд▓ рд╣реИ! ЁЯдФ рдореИрдВ рдЖрдкрдХреЛ рдЗрд╕реЗ рд╕рдордЭрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реВрдВрдЧрд╛ред рдпрд╛рдж рд░рдЦреЗрдВ, рд╕реАрдЦрдирд╛ рдмреНрд▓реЙрдХреНрд╕ рдмрдирд╛рдиреЗ рдХреА рддрд░рд╣ рд╣реИ - рд╣рдо рд╕рд░рд▓ рдЪреАрдЬреЛрдВ рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВ! ЁЯМЯ"
      },
      ta: {
        electricity: "тЪб рооро┐ройрпНроЪро╛ро░роорпН роХроорпНрокро┐роХро│рпН ро╡ро┤ро┐ропро╛роХ рокро╛ропрпБроорпН роХрогрпНрогрпБроХрпНроХрпБ родрпЖро░ро┐ропро╛род роЪроХрпНродро┐! роЗродрпИ роХрпБро┤ро╛ропрпНроХро│ро┐ро▓рпН рокро╛ропрпБроорпН родрогрпНрогрпАро░рпН рокрпЛро▓ роиро┐ройрпИродрпНродрпБроХрпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН. ро╕рпНро╡ро┐роЯрпНроЪрпИ роЕро┤рпБродрпНродрпБроорпНрокрпЛродрпБ, рооро┐ройрпНроЪро╛ро░роорпН ро╡ро┐ро│роХрпНроХрпБ ро╡ро░рпИ роЪрпЖройрпНро▒рпБ роЕродрпИ роТро│ро┐ро░ ро╡рпИроХрпНроХро┐ро▒родрпБ! тЬи",
        fractions: "ЁЯНХ рокро┐ройрпНройроЩрпНроХро│рпН роОройрпНрокродрпБ роорпБро┤рпБро╡родро┐ройрпН рокроХрпБродро┐роХро│рпН! роТро░рпБ рокро┐роЯрпНроЪро╛ро╡рпИ 4 родрпБрогрпНроЯрпБроХро│ро╛роХ ро╡рпЖроЯрпНроЯро┐ройро╛ро▓рпН, роирпАроЩрпНроХро│рпН 2 родрпБрогрпНроЯрпБроХро│рпН роЪро╛рокрпНрокро┐роЯрпНроЯро╛ро▓рпН, роирпАроЩрпНроХро│рпН 2/4 (роЕро▓рпНро▓родрпБ 1/2) рокро┐роЯрпНроЪро╛ роЪро╛рокрпНрокро┐роЯрпНроЯрпАро░рпНроХро│рпН! ЁЯзо",
        verbs: "ЁЯПГтАНтЩВя╕П ро╡ро┐ройрпИроЪрпНроЪрпКро▒рпНроХро│рпН роЪрпЖропро▓рпН роЪрпКро▒рпНроХро│рпН! 'роУроЯрпБ', 'роХрпБродро┐', 'роЪро╛рокрпНрокро┐роЯрпБ', 'родрпВроЩрпНроХрпБ' рокрпЛройрпНро▒ро╡рпИ. 'рокрпВройрпИ роУроЯрпБроХро┐ро▒родрпБ' роОройрпНро▒рпБ роЪрпКройрпНройро╛ро▓рпН, 'роУроЯрпБроХро┐ро▒родрпБ' ро╡ро┐ройрпИроЪрпНроЪрпКро▓рпН! ЁЯУЪ",
        default: "роЗродрпБ рооро┐роХ роиро▓рпНро▓ роХрпЗро│рпНро╡ро┐! ЁЯдФ роЗродрпИ рокроЯро┐рокрпНрокроЯро┐ропро╛роХ рокрпБро░ро┐роп ро╡рпИроХрпНроХро┐ро▒рпЗройрпН. роХро▒рпНро▒ро▓рпН роОройрпНрокродрпБ роХроЯрпНроЯро┐роЯроорпН роХроЯрпНроЯрпБро╡родрпБ рокрпЛро▓ - роОро│ро┐роп ро╡ро┐ро╖ропроЩрпНроХро│ро┐ро▓рпН роЗро░рпБроирпНродрпБ роЖро░роорпНрокро┐роХрпНроХро┐ро▒рпЛроорпН! ЁЯМЯ"
      },
      te: {
        electricity: "тЪб р░╡р░┐р░жр▒Нр░пр▒Бр░др▒Н р░Ер░ир▒Зр░жр░┐ р░др▒Ар░Чр░▓ р░жр▒Нр░╡р░╛р░░р░╛ р░кр▒Нр░░р░╡р░╣р░┐р░Вр░Ър▒З р░Хр░ир░┐р░кр░┐р░Вр░Ър░ир░┐ р░╢р░Хр▒Нр░др░┐! р░жр▒Ар░ир▒Нр░ир░┐ р░кр▒Ир░кр▒Бр░▓р▒Нр░▓р▒Л р░кр▒Нр░░р░╡р░╣р░┐р░Вр░Ър▒З р░ир▒Ар░Яр░┐р░▓р░╛ р░Ер░ир▒Бр░Хр▒Лр░Вр░бр░┐. р░╕р▒Нр░╡р░┐р░Ър▒Н р░ир▒Кр░Хр▒Нр░Хр░┐р░ир░кр▒Нр░кр▒Бр░бр▒Б, р░╡р░┐р░жр▒Нр░пр▒Бр░др▒Н р░мр░▓р▒Нр░мр▒Бр░Хр▒Б р░Ър▒Зр░░р▒Бр░Хр▒Бр░ир░┐ р░жр░╛р░ир▒Нр░ир░┐ р░╡р▒Жр░▓р░┐р░Чр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐! тЬи",
        fractions: "ЁЯНХ р░нр░┐р░ир▒Нр░ир░╛р░▓р▒Б р░Ер░Вр░Яр▒З р░ор▒Кр░др▒Нр░др░Вр░▓р▒Л р░нр░╛р░Чр░╛р░▓р▒Б! р░Тр░Х р░кр░┐р░Ьр▒Нр░Ьр░╛р░ир▒Б 4 р░ор▒Бр░Хр▒Нр░Хр░▓р▒Бр░Чр░╛ р░Хр░Яр▒Нр░Яр░┐р░ир░Яр▒Нр░▓р░пр░┐р░др▒З, р░ор▒Ар░░р▒Б 2 р░ор▒Бр░Хр▒Нр░Хр░▓р▒Б р░др░┐р░Вр░Яр▒З, р░ор▒Ар░░р▒Б 2/4 (р░▓р▒Зр░жр░╛ 1/2) р░кр░┐р░Ьр▒Нр░Ьр░╛ р░др░┐р░ир▒Нр░ир░╛р░░р▒Б! ЁЯзо",
        verbs: "ЁЯПГтАНтЩВя╕П р░Хр▒Нр░░р░┐р░пр░▓р▒Б р░Ер░Вр░Яр▒З р░Ър░░р▒Нр░п р░кр░жр░╛р░▓р▒Б! 'р░кр░░р▒Бр░Чр▒Жр░др▒Нр░др▒Б', 'р░жр▒Вр░Хр▒Б', 'р░др░┐р░ир▒Б', 'р░ир░┐р░жр▒Нр░░р░кр▒Л' р░▓р░╛р░Вр░Яр░┐р░╡р░┐. 'р░кр░┐р░▓р▒Нр░▓р░┐ р░кр░░р▒Бр░Чр▒Жр░др▒Нр░др▒Бр░др▒Бр░Вр░жр░┐' р░Ер░Вр░Яр▒З, 'р░кр░░р▒Бр░Чр▒Жр░др▒Нр░др▒Бр░др▒Бр░Вр░жр░┐' р░Хр▒Нр░░р░┐р░п! ЁЯУЪ",
        default: "р░Зр░жр░┐ р░Ър░╛р░▓р░╛ р░ор░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░и! ЁЯдФ р░жр▒Ар░ир▒Нр░ир░┐ р░ор▒Ар░Хр▒Б р░жр░╢р░▓р░╡р░╛р░░р▒Ар░Чр░╛ р░Ер░░р▒Нр░ер░В р░Ър▒Зр░пр░┐р░╕р▒Нр░др░╛р░ир▒Б. р░ир▒Зр░░р▒Нр░Ър▒Бр░Хр▒Лр░╡р░бр░В р░Ер░Вр░Яр▒З р░Зр░Яр▒Бр░Хр░▓р░др▒Л р░Хр░Яр▒Нр░Яр░бр░В р░▓р░╛р░Вр░Яр░┐р░жр░┐ - р░╕р░╛р░зр░╛р░░р░г р░╡р░┐р░╖р░пр░╛р░▓р░др▒Л р░ор▒Кр░жр░▓р▒Бр░кр▒Жр░бр░др░╛р░В! ЁЯМЯ"
      }
    };

    const langResponses = responses[language as keyof typeof responses] || responses.en;
    
    // Check for keywords in the question
    const lowerQuestion = question.toLowerCase();
    if (lowerQuestion.includes('electric') || lowerQuestion.includes('рдмрд┐рдЬрд▓реА') || lowerQuestion.includes('рооро┐ройрпНроЪро╛ро░роорпН') || lowerQuestion.includes('р░╡р░┐р░жр▒Нр░пр▒Бр░др▒Н')) {
      return langResponses.electricity;
    } else if (lowerQuestion.includes('fraction') || lowerQuestion.includes('рднрд┐рдиреНрди') || lowerQuestion.includes('рокро┐ройрпНройроорпН') || lowerQuestion.includes('р░нр░┐р░ир▒Нр░и')) {
      return langResponses.fractions;
    } else if (lowerQuestion.includes('verb') || lowerQuestion.includes('рдХреНрд░рд┐рдпрд╛') || lowerQuestion.includes('ро╡ро┐ройрпИ') || lowerQuestion.includes('р░Хр▒Нр░░р░┐р░п')) {
      return langResponses.verbs;
    } else {
      return langResponses.default;
    }
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isUser: true,
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);

    try {
      const response = await generateEduBridgeResponse(inputText, selectedLanguage);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        isUser: false,
        timestamp: new Date(),
        language: selectedLanguage
      };

      setMessages(prev => [...prev, aiMessage]);
      
      // Add random feedback emojis
      const emojis = ['тнР', 'ЁЯМЯ', 'ЁЯТл', 'тЬи', 'ЁЯОЙ', 'ЁЯСП', 'ЁЯдЧ', 'ЁЯТЦ'];
      setFeedbackEmojis([emojis[Math.floor(Math.random() * emojis.length)]]);
      setTimeout(() => setFeedbackEmojis([]), 3000);

    } catch (error) {
      toast({
        title: "Error",
        description: "Sorry, I couldn't process your question. Please try again!",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleVoiceInput = (transcript: string) => {
    setInputText(transcript);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-100 via-blue-50 to-green-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-6">
          <div className="flex items-center justify-center gap-2 mb-2">
            <BookOpen className="w-8 h-8 text-orange-500" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-orange-500 to-blue-600 bg-clip-text text-transparent">
              EduBridge
            </h1>
            <Heart className="w-8 h-8 text-red-400" />
          </div>
          <p className="text-gray-600 text-lg">Your friendly AI tutor for learning anything! ЁЯМЯ</p>
        </div>

        {/* Control Panel */}
        <Card className="p-4 mb-6 bg-white/70 backdrop-blur-sm">
          <div className="flex flex-wrap items-center gap-4 justify-between">
            <div className="flex items-center gap-2">
              <Globe className="w-5 h-5 text-blue-500" />
              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map(lang => (
                    <SelectItem key={lang.code} value={lang.code}>
                      {lang.flag} {lang.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                {isOfflineMode ? <WifiOff className="w-5 h-5 text-gray-500" /> : <Wifi className="w-5 h-5 text-green-500" />}
                <Switch
                  checked={isOfflineMode}
                  onCheckedChange={setIsOfflineMode}
                />
                <span className="text-sm text-gray-600">
                  {isOfflineMode ? 'Offline Mode' : 'Online Mode'}
                </span>
              </div>
            </div>
          </div>
        </Card>

        {/* Chat Area */}
        <Card className="h-96 mb-4 p-4 bg-white/70 backdrop-blur-sm overflow-hidden">
          <div className="h-full overflow-y-auto space-y-4">
            {messages.map((message) => (
              <ChatMessage key={message.id} message={message} />
            ))}
            {isLoading && (
              <div className="flex items-center gap-2 text-gray-500">
                <div className="animate-spin w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                <span>EduBridge is thinking...</span>
              </div>
            )}
          </div>
        </Card>

        {/* Feedback Emojis */}
        {feedbackEmojis.length > 0 && (
          <div className="text-center mb-4">
            {feedbackEmojis.map((emoji, index) => (
              <span key={index} className="text-3xl animate-bounce inline-block mx-1">
                {emoji}
              </span>
            ))}
          </div>
        )}

        {/* Input Area */}
        <Card className="p-4 bg-white/70 backdrop-blur-sm">
          <div className="flex gap-2">
            <Textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="Ask me anything about math, science, or language! ЁЯУЪ"
              className="flex-1 min-h-[80px] text-lg"
              onKeyPress={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSendMessage();
                }
              }}
            />
            <div className="flex flex-col gap-2">
              <VoiceInput
                isListening={isListening}
                onToggleListening={setIsListening}
                onTranscript={handleVoiceInput}
                language={selectedLanguage}
              />
              <TextToSpeech
                isSpeaking={isSpeaking}
                onToggleSpeaking={setIsSpeaking}
                language={selectedLanguage}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputText.trim() || isLoading}
                className="bg-gradient-to-r from-orange-500 to-blue-600 hover:from-orange-600 hover:to-blue-700 text-white"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </Card>

        {/* Footer */}
        <div className="text-center mt-6 text-sm text-gray-500">
          <p>Made with тЭдя╕П to help children learn and grow тАв EduBridge AI Tutor</p>
        </div>
      </div>
    </div>
  );
};

export default EduBridgeApp;
